<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://lug.ustc.edu.cn/feed.xml" rel="self" type="application/atom+xml" /><link href="https://lug.ustc.edu.cn/" rel="alternate" type="text/html" /><updated>2021-06-01T21:45:29+08:00</updated><id>https://lug.ustc.edu.cn/feed.xml</id><title type="html">LUG @ USTC</title><subtitle>LUG @ USTC 新版网站</subtitle><author><name>USTCLUG</name></author><entry><title type="html">Linux 101 第三课</title><link href="https://lug.ustc.edu.cn/news/2021/04/linux-101-3/" rel="alternate" type="text/html" title="Linux 101 第三课" /><published>2021-04-28T14:30:00+08:00</published><updated>2021-05-17T18:03:52+08:00</updated><id>https://lug.ustc.edu.cn/news/2021/04/linux-101-3</id><content type="html" xml:base="https://lug.ustc.edu.cn/news/2021/04/linux-101-3/">&lt;p&gt;2021 年 4 月 28 日，中国科学技术大学 Linux 用户协会在 3A211 教室举办了本学期第三次 Linux 101 课程，本次课程的主要内容是 Linux 下的用户管理和权限机制，同时介绍了 Linux 下文件系统层次规范，主讲同学准备了大量操作演示。同时，同学们交流了近期 Linux 使用存在的若干问题，现场氛围融洽。&lt;/p&gt;
        &lt;p&gt;讲稿现已上传 LUG FTP。&lt;/p&gt;</content><author><name>Elsa Granger</name></author><category term="LUG活动" /><category term="Linux 101" /><summary type="html">2021 年 4 月 28 日，中国科学技术大学 Linux 用户协会在 3A211 教室举办了本学期第三次 Linux 101 课程，本次课程的主要内容是 Linux 下的用户管理和权限机制，同时介绍了 Linux 下文件系统层次规范，主讲同学准备了大量操作演示。同时，同学们交流了近期 Linux 使用存在的若干问题，现场氛围融洽。</summary></entry><entry><title type="html">2021 Linux 板版衫设计方案征集</title><link href="https://lug.ustc.edu.cn/news/2021/04/lug-banshan/" rel="alternate" type="text/html" title="2021 Linux 板版衫设计方案征集" /><published>2021-04-27T01:01:00+08:00</published><updated>2021-04-27T18:00:11+08:00</updated><id>https://lug.ustc.edu.cn/news/2021/04/lug-banshan</id><content type="html" xml:base="https://lug.ustc.edu.cn/news/2021/04/lug-banshan/">&lt;p&gt;经过了去年的疫情，时隔一年，Linux 板 &amp;amp; USTC LUG 版衫企划再次启动啦！&lt;/p&gt;
        &lt;p&gt;跟往年一样，首先征集设计方案。&lt;/p&gt;
        &lt;p&gt;5 月中旬将通过投票选出最受欢迎的设计方案，并启动预订。尽力在 6 月份毕业生离校前完成版衫制作和发放。&lt;/p&gt;
        &lt;h2 id=&quot;设计要求&quot;&gt;设计要求&lt;/h2&gt;
        &lt;ul&gt;
        &lt;li&gt;&lt;strong&gt;主题：&lt;/strong&gt;Linux 与自由软件，体现瀚海星云 Linux 板或 USTC LUG 特色&lt;/li&gt;
        &lt;li&gt;&lt;strong&gt;底色：&lt;/strong&gt;不限，建议至少包含白色、黑色设计方案&lt;/li&gt;
        &lt;li&gt;&lt;strong&gt;图案：&lt;/strong&gt;正面或双面图案（可设袖标），提交图案分辨率不低于 300DPI，并附简单效果图说明图案位置。&lt;/li&gt;
        &lt;li&gt;&lt;strong&gt;授权：&lt;/strong&gt;投稿作品默认以 &lt;a href=&quot;https://creativecommons.org/licenses/by-sa/4.0/&quot;&gt;CC BY-SA 4.0&lt;/a&gt; 协议发布。如果选择其他授权，则应确保作品可以在 CC BY-SA 协议下再发布。&lt;/li&gt;
        &lt;/ul&gt;
        &lt;h2 id=&quot;投稿方式&quot;&gt;投稿方式&lt;/h2&gt;
        &lt;ul&gt;
        &lt;li&gt;&lt;strong&gt;方式１&lt;/strong&gt;：回复瀚海星云 BBS 的&lt;a href=&quot;https://bbs.ustc.edu.cn/cgi/bbscon?bn=Linux&amp;amp;fn=M6087D60B&amp;amp;num=20000&quot;&gt;征集贴&lt;/a&gt;，以附件形式附上设计图&lt;/li&gt;
        &lt;li&gt;&lt;strong&gt;方式２&lt;/strong&gt;：发邮件至 &lt;a href=&quot;mailto:lug@ustc.edu.cn&quot;&gt;lug@ustc.edu.cn&lt;/a&gt;，标题「2021 版衫设计方案投稿」&lt;/li&gt;
        &lt;/ul&gt;
        &lt;h2 id=&quot;方案选择&quot;&gt;方案选择&lt;/h2&gt;
        &lt;p&gt;若方案多于 1 种，则通过投票来选出最终方案。投票将在方案征集后一周进行。&lt;/p&gt;
        &lt;h2 id=&quot;奖励&quot;&gt;奖励&lt;/h2&gt;
        &lt;ul&gt;
        &lt;li&gt;&lt;strong&gt;被选中方案&lt;/strong&gt;的设计者可免费获得&lt;strong&gt;两件&lt;/strong&gt; 2021 Linux 板版衫。&lt;/li&gt;
        &lt;li&gt;&lt;strong&gt;得票前 6 名&lt;/strong&gt;的其他未选中方案，设计者可免费获得一件 2021 Linux 板版衫。&lt;/li&gt;
        &lt;/ul&gt;
        &lt;h2 id=&quot;征集时间&quot;&gt;征集时间&lt;/h2&gt;
        &lt;p&gt;即日起至北京时间 &lt;strong&gt;5 月 16 日（周日）23:59:59&lt;/strong&gt;。&lt;/p&gt;
        &lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;
        &lt;p&gt;&lt;a href=&quot;https://ftp.lug.ustc.edu.cn/misc/&quot;&gt;LUG 相关素材&lt;/a&gt;
        &lt;a href=&quot;https://ftp.lug.ustc.edu.cn/%E7%89%88%E8%A1%AB/&quot;&gt;往届板衫设计图&lt;/a&gt;&lt;/p&gt;</content><author><name>totoroyyw</name></author><category term="LUG活动" /><category term="LUG" /><category term="版衫" /><summary type="html">经过了去年的疫情，时隔一年，Linux 板 &amp;amp; USTC LUG 版衫企划再次启动啦！</summary></entry><entry><title type="html">「开源软件供应链点亮计划——暑期 2021」USTCLUG 项目提案</title><link href="https://lug.ustc.edu.cn/news/2021/04/opensource-summer-iscas/" rel="alternate" type="text/html" title="「开源软件供应链点亮计划——暑期 2021」USTCLUG 项目提案" /><published>2021-04-22T01:00:00+08:00</published><updated>2021-05-16T16:42:41+08:00</updated><id>https://lug.ustc.edu.cn/news/2021/04/opensource-summer-iscas</id><content type="html" xml:base="https://lug.ustc.edu.cn/news/2021/04/opensource-summer-iscas/">&lt;p&gt;「开源软件供应链点亮计划」是由中国科学院软件研究所发起并长期支持一项活动，旨在解决基础开源软件面临的许可、质量、维护和技术支持等问题，进而影响整个软件产业的供应链。而&lt;a href=&quot;https://summer.iscas.ac.cn/&quot;&gt;「开源软件供应链点亮计划——暑期 2021」&lt;/a&gt;是由中科院软件所与 openEuler 社区共同举办的一项面向高校学生的暑期活动，旨在鼓励在校学生积极参与开源软件的开发维护，促进国内优秀开源软件社区的蓬勃发展。&lt;/p&gt;
        &lt;!--more--&gt;
        &lt;p&gt;此活动与 GSoC (Google Summer of Code) 的模式类似：开源项目/社区提供项目需求与导师 (mentor)；学生申请项目通过后利用暑期的时间进行开发，将成果贡献给社区；主办方（中科院软件所与 openEuler 社区）根据评估结果给学生发放奖金。所有参与的社区列表可查看 &lt;a href=&quot;https://summer.iscas.ac.cn/#/org&quot;&gt;https://summer.iscas.ac.cn/#/org&lt;/a&gt;。&lt;/p&gt;
        &lt;p&gt;今年夏天，USTCLUG (中科大学生 Linux 用户协会) 计划以社区身份加入此暑期活动。以下是我们计划的项目提案，也欢迎社团的各位同学提出建议。&lt;/p&gt;
        &lt;p&gt;&lt;strong&gt;在报名前，请先阅读由主办方提供的&lt;a href=&quot;https://summer.iscas.ac.cn/help/student/&quot;&gt;学生指南&lt;/a&gt;。&lt;/strong&gt;&lt;/p&gt;
        &lt;h2 id=&quot;通用反向代理缓存程序&quot;&gt;通用反向代理缓存程序&lt;/h2&gt;
        &lt;p&gt;项目描述：受到磁盘空间等的限制，镜像站有些时候无法完整同步上游的文件。退而求其次，能否只缓存“流行”的文件？能否在对缓存的总容量大小与文件过期时间进行限制的情况下管理缓存的文件？能否查看缓存命中率等指标，进行问题排查与优化？尽管现有的反向代理实现能够做到缓存，但是配置并不够灵活，无法满足需求。本项目计划构建一个灵活的、适用于镜像站场景的通用的 HTTP 反向代理缓存程序，提高用户体验。&lt;/p&gt;
        &lt;p&gt;项目难度：中&lt;/p&gt;
        &lt;p&gt;LICENSE：自选开源协议。&lt;/p&gt;
        &lt;p&gt;项目社区导师：陶柯宇&lt;/p&gt;
        &lt;p&gt;导师联系方式：taoky AT ustclug.org&lt;/p&gt;
        &lt;p&gt;合作导师：明宇龙&lt;/p&gt;
        &lt;p&gt;联系方式：myl AT ustclug.org&lt;/p&gt;
        &lt;p&gt;项目产出要求：一个稳定的、经过测试可用的 HTTP 反向代理缓存程序（缓存得到的文件存储在传统文件系统上），包括以下要求：&lt;/p&gt;
        &lt;ul&gt;
        &lt;li&gt;包含对缓存总大小与文件过期时间限制的缓存规则实现。
        &lt;ul&gt;
        &lt;li&gt;能够定时或实时清理不符合缓存条件的文件。&lt;/li&gt;
        &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;用户可编写配置文件，针对符合不同规则的路径，配置不同的缓存规则。&lt;/li&gt;
        &lt;li&gt;实现日志与用量统计。&lt;/li&gt;
        &lt;li&gt;通过有效性测试，可正确对 pypi/conda 镜像设置反代。&lt;/li&gt;
        &lt;/ul&gt;
        &lt;p&gt;项目技术要求：&lt;/p&gt;
        &lt;ul&gt;
        &lt;li&gt;对 HTTP(S) 相关协议有基础了解。&lt;/li&gt;
        &lt;li&gt;有高性能的网络编程语言的编程能力。&lt;/li&gt;
        &lt;li&gt;有使用内存数据库的经验。&lt;/li&gt;
        &lt;/ul&gt;
        &lt;p&gt;相关开源软件仓库列表：&lt;/p&gt;
        &lt;ul&gt;
        &lt;li&gt;&lt;a href=&quot;https://github.com/sjtug/mirror-intel&quot;&gt;https://github.com/sjtug/mirror-intel&lt;/a&gt;（SJTUG 镜像的智能缓存方案，缺少本提案中计划的一些特性）&lt;/li&gt;
        &lt;/ul&gt;
        &lt;h2 id=&quot;rsync-在传统文件系统架构上的性能改进&quot;&gt;Rsync 在传统文件系统架构上的性能改进&lt;/h2&gt;
        &lt;p&gt;项目描述：Rsync 是镜像站上下游间进行同步的事实标准，但是由于每次同步时 rsync 服务器与客户端都需要扫描一遍本地的文件列表，即使只有少量的文件需要更新，每次同步仍然会带来很高的 I/O 消耗，大幅度提高了服务的负载，降低了服务性能。本项目计划通过修改 rsync 服务端与客户端的实现，在不大幅影响整体架构的情况下优化 rsync 对文件元数据的读写性能（读取为主），降低镜像站的负载，提升 rsync 同步速度与服务性能。&lt;/p&gt;
        &lt;p&gt;项目难度：高&lt;/p&gt;
        &lt;p&gt;LICENSE：自选开源协议。对 rsync 的修改需要以 GPL v3 发布。&lt;/p&gt;
        &lt;p&gt;项目社区导师：陶柯宇&lt;/p&gt;
        &lt;p&gt;导师联系方式：taoky AT ustclug.org&lt;/p&gt;
        &lt;p&gt;合作导师：明宇龙&lt;/p&gt;
        &lt;p&gt;联系方式：myl AT ustclug.org&lt;/p&gt;
        &lt;p&gt;项目产出要求：本项目包含对 rsync 服务端和客户端这两个部分进行改进的要求。以下要求作为参考，如果有更好的 idea 在讨论后也可实现。&lt;/p&gt;
        &lt;ul&gt;
        &lt;li&gt;Rsync 客户端
        &lt;ul&gt;
        &lt;li&gt;修改 rsync 客户端，使其能够访问 rsync-huai 的元数据，以在同步时减小对主仓库的磁盘压力。&lt;/li&gt;
        &lt;li&gt;修改 rsync 客户端，针对镜像站场景减少多余的本地读写，提高性能。&lt;/li&gt;
        &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;Rsync 服务端
        &lt;ul&gt;
        &lt;li&gt;不修改服务端（rsync-huai）的源代码，而是使用 FUSE 设计高性能的、只存储文件元数据的文件系统存储文件元数据。例如，可以将元数据存储在内存数据库中，以减小 rsync-huai 在获取文件元数据时对磁盘的压力。&lt;/li&gt;
        &lt;li&gt;或者，修改服务端代码，使其可以绕过 kernel (FUSE) 直接连接相关数据库读取元信息。&lt;/li&gt;
        &lt;/ul&gt;
        &lt;/li&gt;
        &lt;/ul&gt;
        &lt;p&gt;项目技术要求：&lt;/p&gt;
        &lt;ul&gt;
        &lt;li&gt;有 rsync 的使用经验。&lt;/li&gt;
        &lt;li&gt;C 语言编程能力，以及其他系统开发语言（如 C++, Go, Rust 等）的编程能力。&lt;/li&gt;
        &lt;li&gt;有 FUSE 的编程经验。&lt;/li&gt;
        &lt;/ul&gt;
        &lt;p&gt;相关开源软件仓库列表：&lt;/p&gt;
        &lt;ul&gt;
        &lt;li&gt;&lt;a href=&quot;https://rsync.samba.org/&quot;&gt;https://rsync.samba.org/&lt;/a&gt;（Rsync 官方实现）&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;https://github.com/tuna/rsync&quot;&gt;https://github.com/tuna/rsync&lt;/a&gt;（Rsync-huai 实现）&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;https://github.com/facebook/rocksdb&quot;&gt;https://github.com/facebook/rocksdb&lt;/a&gt;（RocksDB 数据库，可作为在实现使用 FUSE 的元数据文件系统的参考）&lt;/li&gt;
        &lt;/ul&gt;
        &lt;h2 id=&quot;全连通内网守护程序&quot;&gt;全连通内网守护程序&lt;/h2&gt;
        &lt;p&gt;项目描述：一个组织的鉴权接口、数据库接口等服务都不应在公网公开，而内网（IntraNet）的瓶颈通常会出现在转发流量的网关上，若任意两台机器间直连则可以让总网络压力下降不少（一般需要借助中心节点协助 NAT 后的机器打洞）。Tinc 等优秀项目年久失修、无人维护，WireGuard 等新兴 Site2Site 的虚拟专用网络较轻便简单但是未实现 mesh、会对中心网关产生较大的流量压力。本项目计划构建一个灵活高效的全连通内网守护程序（IntraNet VPN）。&lt;/p&gt;
        &lt;p&gt;项目难度：中&lt;/p&gt;
        &lt;p&gt;LICENSE：自选开源协议。&lt;/p&gt;
        &lt;p&gt;项目社区导师：袁一玮&lt;/p&gt;
        &lt;p&gt;导师联系方式：totoroyyw AT ustclug.org&lt;/p&gt;
        &lt;p&gt;合作导师：明宇龙&lt;/p&gt;
        &lt;p&gt;合作导师联系方式：myl AT ustclug.org&lt;/p&gt;
        &lt;p&gt;项目产出要求：一个稳定的、全连通内网守护程序，包括以下要求：&lt;/p&gt;
        &lt;ul&gt;
        &lt;li&gt;用户可方便地对内网中的节点进行增删与同步配置（亦可选用其他虚拟专用网络实现作为基础）
        &lt;ul&gt;
        &lt;li&gt;基于 WireGuard，将 AllowedIPs 变为 AllowedMacs（实现基于 Mac 地址而非 IP 地址的配置描述）&lt;/li&gt;
        &lt;li&gt;在内网新加入一台机器后，整个内网可以自动更新、同步节点配置（选做）&lt;/li&gt;
        &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;通过有效性测试，可以在快速路由迭代后实现任意节点间的 mesh 连接&lt;/li&gt;
        &lt;li&gt;程序尽可能高效，减少内网中较大流量机器的 CPU 压力&lt;/li&gt;
        &lt;li&gt;可以让两台在 NAT 之后的机器直接相连（选做，假设 NAT 打洞完可以持续使用）&lt;/li&gt;
        &lt;/ul&gt;
        &lt;p&gt;项目技术要求：&lt;/p&gt;
        &lt;ul&gt;
        &lt;li&gt;对 OSI 二层或三层模型有所了解，对内网搭建和架构有所了解&lt;/li&gt;
        &lt;li&gt;有高性能的网络编程语言的编程能力&lt;/li&gt;
        &lt;/ul&gt;
        &lt;p&gt;相关开源软件仓库列表：&lt;/p&gt;
        &lt;ul&gt;
        &lt;li&gt;&lt;a href=&quot;https://github.com/cloudflare/boringtun&quot;&gt;https://github.com/cloudflare/boringtun&lt;/a&gt; (Rust 下的用户态 WireGuard 实现)&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;https://github.com/WireGuard/wireguard-go&quot;&gt;https://github.com/WireGuard/wireguard-go&lt;/a&gt; (Go 下的 WireGuard 实现)&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;https://gitlab.com/NickCao/RAIT/&quot;&gt;https://gitlab.com/NickCao/RAIT/&lt;/a&gt; (基于 WireGuard 的三层分布式全连通网络实现，缺少本提案中计划的一些特性)&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;https://github.com/gsliepen/tinc&quot;&gt;https://github.com/gsliepen/tinc&lt;/a&gt; (工作在 OSI 二层或三层的全连通网络实现，但其已年久失修，最近一次稳定版 release 是两年前)&lt;/li&gt;
        &lt;/ul&gt;</content><author><name>totoroyyw</name></author><summary type="html">「开源软件供应链点亮计划」是由中国科学院软件研究所发起并长期支持一项活动，旨在解决基础开源软件面临的许可、质量、维护和技术支持等问题，进而影响整个软件产业的供应链。而「开源软件供应链点亮计划——暑期 2021」是由中科院软件所与 openEuler 社区共同举办的一项面向高校学生的暑期活动，旨在鼓励在校学生积极参与开源软件的开发维护，促进国内优秀开源软件社区的蓬勃发展。</summary></entry><entry><title type="html">Linux 101 第二课</title><link href="https://lug.ustc.edu.cn/news/2021/04/linux-101-2/" rel="alternate" type="text/html" title="Linux 101 第二课" /><published>2021-04-18T14:30:00+08:00</published><updated>2021-05-17T18:03:52+08:00</updated><id>https://lug.ustc.edu.cn/news/2021/04/linux-101-2</id><content type="html" xml:base="https://lug.ustc.edu.cn/news/2021/04/linux-101-2/">&lt;p&gt;2021 年 4 月 18 日下午，USTCLUG 在西区 3C104 教室举办了 Linux 101 活动的第二课：Shell 基础、软件和命令行工具。&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;http://ftp.lug.ustc.edu.cn/%E6%B4%BB%E5%8A%A8/2021.04.18_Linux_101_%E7%AC%AC%E4%BA%8C%E8%AF%BE/Photos/_DSC4038.JPG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
        &lt;p&gt;Linux 101 是 USTCLUG 每年举办的 Linux 教学活动系列。在此系列活动中，USTCLUG 将介绍 Linux 的命令行使用技巧，带领大家认识 Shell、熟悉 Linux 的基本命令行工具，掌握基本的 Linux 使用技巧，从而提高工作效率、增加个人技能。&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;http://ftp.lug.ustc.edu.cn/%E6%B4%BB%E5%8A%A8/2021.04.18_Linux_101_%E7%AC%AC%E4%BA%8C%E8%AF%BE/Photos/_DSC4044.JPG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;http://ftp.lug.ustc.edu.cn/%E6%B4%BB%E5%8A%A8/2021.04.18_Linux_101_%E7%AC%AC%E4%BA%8C%E8%AF%BE/Photos/_DSC4047.JPG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
        &lt;p&gt;这是 Linux 101 的第二课。USTCLUG 在此次活动中为前来的同学提供了基本的命令行操作教学，解决了同学们 Linux 的基本使用问题。USTCLUG 的指导员热情友善，参加的同学们乐于发问、渴求知识，活动取得了巨大的成功。同学们借助此机会认识了 Linux 的基本特点，也为大家埋下了中国开源社区的基础。&lt;/p&gt;
        &lt;p&gt;此次活动是 Linux 101 活动系列的第二课，之后也将会有进一步的课程举办，欢迎大家前来参加！&lt;/p&gt;</content><author><name>Elsa Granger</name></author><category term="LUG活动" /><category term="Linux 101" /><summary type="html">2021 年 4 月 18 日下午，USTCLUG 在西区 3C104 教室举办了 Linux 101 活动的第二课：Shell 基础、软件和命令行工具。</summary></entry><entry><title type="html">Linux 101 第一课</title><link href="https://lug.ustc.edu.cn/news/2021/04/linux-101-1/" rel="alternate" type="text/html" title="Linux 101 第一课" /><published>2021-04-11T14:30:00+08:00</published><updated>2021-04-23T19:15:23+08:00</updated><id>https://lug.ustc.edu.cn/news/2021/04/linux-101-1</id><content type="html" xml:base="https://lug.ustc.edu.cn/news/2021/04/linux-101-1/">&lt;p&gt;2021 年 4 月 11 日下午，USTCLUG 在西区 3C104 教室举办了 Linux 101 活动的第一课：LIP（Linux Install Party）。&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;http://ftp.lug.ustc.edu.cn/%E6%B4%BB%E5%8A%A8/2021.04.11_Linux_101_%E7%AC%AC%E4%B8%80%E8%AF%BE_%E6%9A%A8_Linux_Install_Party/photos/_DSC3854.JPG&quot; alt=&quot;overview&quot; /&gt;&lt;/p&gt;
        &lt;p&gt;Linux 101 是 USTCLUG 每年举办的 Linux 教学活动系列。在此系列活动中，USTCLUG 将介绍 Linux 的方方面面，带领大家认识 Linux、熟悉 Linux，掌握基本的 Linux 使用技巧，从而提高工作效率、增加个人技能。&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;http://ftp.lug.ustc.edu.cn/%E6%B4%BB%E5%8A%A8/2021.04.11_Linux_101_%E7%AC%AC%E4%B8%80%E8%AF%BE_%E6%9A%A8_Linux_Install_Party/photos/_DSC3844.JPG&quot; alt=&quot;welcome page&quot; /&gt;&lt;/p&gt;
        &lt;p&gt;LIP 是 Linux 101 的第一课。正如其名，USTCLUG 在此次活动中为前来的同学指导安装了 Linux 的各个发行版，解决了同学们基本的 Linux 安装问题。USTCLUG 的指导员热情友善，参加的同学们乐于发问、渴求知识，活动取得了巨大的成功。&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;http://ftp.lug.ustc.edu.cn/%E6%B4%BB%E5%8A%A8/2021.04.11_Linux_101_%E7%AC%AC%E4%B8%80%E8%AF%BE_%E6%9A%A8_Linux_Install_Party/photos/_DSC3899.JPG&quot; alt=&quot;3 ways to use linux&quot; /&gt;&lt;/p&gt;
        &lt;p&gt;同学们借助此机会认识了 Linux 的基本特点，也为大家埋下了中国开源社区的基础。&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;http://ftp.lug.ustc.edu.cn/%E6%B4%BB%E5%8A%A8/2021.04.11_Linux_101_%E7%AC%AC%E4%B8%80%E8%AF%BE_%E6%9A%A8_Linux_Install_Party/photos/_DSC3983.JPG&quot; alt=&quot;assist students 1&quot; /&gt;&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;http://ftp.lug.ustc.edu.cn/%E6%B4%BB%E5%8A%A8/2021.04.11_Linux_101_%E7%AC%AC%E4%B8%80%E8%AF%BE_%E6%9A%A8_Linux_Install_Party/photos/_DSC3990.JPG&quot; alt=&quot;assist students 2&quot; /&gt;&lt;/p&gt;
        &lt;p&gt;此次 LIP 活动只是 Linux 101 活动系列的第一课，之后将会有进一步的课程举办，欢迎大家前来参加！&lt;/p&gt;</content><author><name>myl7</name></author><category term="LUG活动" /><category term="Linux 101" /><category term="Linux Install Party" /><summary type="html">2021 年 4 月 11 日下午，USTCLUG 在西区 3C104 教室举办了 Linux 101 活动的第一课：LIP（Linux Install Party）。</summary></entry><entry><title type="html">无主题小聚</title><link href="https://lug.ustc.edu.cn/news/2021/03/multitopic-party/" rel="alternate" type="text/html" title="无主题小聚" /><published>2021-03-31T17:30:00+08:00</published><updated>2021-04-22T18:59:47+08:00</updated><id>https://lug.ustc.edu.cn/news/2021/03/multitopic-party</id><content type="html" xml:base="https://lug.ustc.edu.cn/news/2021/03/multitopic-party/">&lt;p&gt;2021 年 3 月 31 日下午，我们在西区 3A108 教室开展了本学期的第一次小聚，由明宇龙和袁一玮两位同学主讲。&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;https://ftp.lug.ustc.edu.cn/weekly_party/2021.3.31_%E6%97%A0%E4%B8%BB%E9%A2%98%E5%B0%8F%E8%81%9A/photos/IMG_20210331_162444.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
        &lt;p&gt;从 jQuery 到 React、从 webpack 到 esbuild，前端开发迭代出了纷繁复杂的工具链。
        明宇龙同学从 JavaScript 的历史讲起，系统梳理了 Web 前端开发工具的历史沿革，结合自己的学习历程，概述了前端开发的现状。&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;https://ftp.lug.ustc.edu.cn/weekly_party/2021.3.31_%E6%97%A0%E4%B8%BB%E9%A2%98%E5%B0%8F%E8%81%9A/photos/IMG_20210331_170157.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
        &lt;p&gt;袁一玮同学则介绍了家庭组网各种方法。开始简略描述了常见的 frp 反代、突破 ISP 的 NAT，到 zerotier 一键组网，再到自己使用 Tinc 和 WireGuard 在本地进行组网和开发不再活跃的 Tinc 所带来的缺陷，最后介绍了使用 OSPF 和 BGP 在内网路由的 dn42、扮演 ISP、注册 ASN、拿到 IPv4 和 IPv6 地址池并进行广播。&lt;/p&gt;</content><author><name>wyf</name></author><category term="LUG活动" /><summary type="html">2021 年 3 月 31 日下午，我们在西区 3A108 教室开展了本学期的第一次小聚，由明宇龙和袁一玮两位同学主讲。</summary></entry><entry><title type="html">用 Python 处理大物实验数据</title><link href="https://lug.ustc.edu.cn/planet/2021/01/physexp-using-python/" rel="alternate" type="text/html" title="用 Python 处理大物实验数据" /><published>2021-01-25T00:00:00+08:00</published><updated>2021-01-26T19:25:49+08:00</updated><id>https://lug.ustc.edu.cn/planet/2021/01/physexp-using-python</id><content type="html" xml:base="https://lug.ustc.edu.cn/planet/2021/01/physexp-using-python/">&lt;p&gt;身为某&lt;a href=&quot;http://世界一流退学.com&quot;&gt;世界一流退学&lt;/a&gt;的学生，大物实验自然是逃不过。本人有幸选择了大物实验最多的专业方向，从一级做到六级，直到上学期刚刚结束。大物实验里数据处理是占了很多时间的，那么怎么才能「优雅」地完成这一工作呢？&lt;/p&gt;
        &lt;h2 id=&quot;开始&quot;&gt;开始&lt;/h2&gt;
        &lt;p&gt;大一的时候讲座推荐的软件是 Origin，画图、拟合等虽然方便，但完全鼠标操作，并且只有 Windows 上能运行，Wine 上有时会遇到个别功能不好用，很影响体验（当时我的电脑配置不好，玩不起虚拟机）。思来想去，还是觉得 Python 比较自然，于是故事就这样开始了。&lt;/p&gt;
        &lt;p&gt;在一级、二级大物中，需求基本是：散点画图（有时是对数）、线性拟合、组合的画图，以及不确定度计算和一般的数值计算。输入输出方面，要手工输入有时候多达几页的手写数据，画出来的图打印上交、计算出的结果手写进实验报告。&lt;/p&gt;
        &lt;p&gt;Python 做这些事情其实都不困难。画图用 Matplotlib 非常方便，也可以直接保存图片。数据计算自然是 NumPy。线性拟合的话，最初选择了 SciPy。输入输出还是比较基本，从文件读入。&lt;/p&gt;
        &lt;p&gt;于是，第一个实验「自由落体」的数据和处理就是这样：&lt;/p&gt;
        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#光电门间距 H cm
        #数量级
        e -2
        90.0	90.0	90.0	80.0	80.0	80.0	70.0	70.0	70.0	60.0	60.0	60.0	50.0	50.0	50.0	40.0	40.0	40.0	30.0	30.0	30.0	20.0	20.0	20.0
        #时间差 t ms
        e -3
        331.6	331.5	331.8	307.9	307.9	307.9	282.9	282.8	282.9	255.8	255.7	255.7	226.9	227.0	226.9	195.2	195.2	195.2	159.9	159.9	159.8	119.2	119.1	119.2
        &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/env python3
        # -*- coding: utf-8 -*-
        &lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numpy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;
        &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;
        &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scipy&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stats&lt;/span&gt;
        &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;math&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#avoid font problem
        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rcParams&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'font.sans-serif'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'SimHei'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rcParams&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'axes.unicode_minus'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#read data
        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#order of magnitude
        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oom&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;fin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'./data.txt'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'r'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readlines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'#'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#line start with # is comment
        &lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'e'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;oom&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()]))&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;oom&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# print(data)
        ### main processing ###
        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;y0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;y1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;slope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intercept&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std_err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linregress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# z = np.polyfit(x, y1, 1)
        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s_slope&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slope&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;s_intercept&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s_slope&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'linear regression:'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'slope:'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'intercept:'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intercept&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'r-value:'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'p-value:'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'std-err:'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std_err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'r-squared:'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'斜率标准差:'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s_slope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'截距标准差:'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s_intercept&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'算得重力加速度:'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#plot
        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scatter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;marker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'*'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'black'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'原始数据'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# plt.plot(x, y1, '--', color='green', label='光滑曲线')
        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intercept&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slope&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'r'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'拟合直线'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xlabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'时间 t/s'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ylabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'平均速度 H/t / m/s'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;legend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'小球下落平均速度与时间关系图'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savefig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'pic.png'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;&lt;img src=&quot;/static/planet/2021-01-25-physexp-using-python-1.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;
        &lt;p&gt;只是画了张图就这么麻烦，很明显，除了练习了 Python 之外，和 Origin 相比生产力负提升。&lt;/p&gt;
        &lt;p&gt;之后的问题就是简化这些过程了。&lt;/p&gt;
        &lt;h2 id=&quot;两年之后&quot;&gt;两年之后&lt;/h2&gt;
        &lt;p&gt;经过一年多的开发，我将一些常用的画图和数据处理操作打包成库，并添加了方便的文件输入和自动生成 docx 文件的功能。同时将 Python 包 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;physicsexp&lt;/code&gt; 发布到了 PyPI（和 AUR 一样，在 PyPI 发布包的门槛几乎没有）。&lt;/p&gt;
        &lt;p&gt;这里以三级大物 β 射线吸收为例。现在，读入文件只需要这样：&lt;/p&gt;
        &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;fin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'./data.txt'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'r'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encoding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'utf-8'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;readoneline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;readoneline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Al_num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;readoneline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;readoneline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;fin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;数据做图也只要一行代码，一张图上多个曲线也只是一个参数的事，比如这是一张有三条线的图：&lt;/p&gt;
        &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;simple_plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Momentum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Emeasure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;issetrange&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'+'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lab&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'测量动能'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;simple_plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Momentum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Eclassic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;issetrange&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'*'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lab&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'经典动能'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;simple_plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Momentum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Erela&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'o'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'1.png'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;issetrange&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xlab&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'$pc/MeV$'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ylab&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'$E/MeV$'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'电子动能随动量变化曲线'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lab&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'相对论动能'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;画图并线性拟合也是非常常见的操作，于是也加入了库：&lt;/p&gt;
        &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;slope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intercept&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;simple_linear_plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Al_Real&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CntLn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xlab&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'质量厚度$g/cm^{-2}$'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ylab&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'选区计数率对数(射线强度)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'半对数曲线曲线'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'3.png'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1e4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Cnt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intercept&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;最后，一行代码将所有的数据和图片生成直接可以打印的 docx 文件，包含名字和日期：&lt;/p&gt;
        &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;gendocx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'gen.docx'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'1.png'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'2.png'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'3.png'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'slope, intercept: %f %f'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intercept&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;文件如图所示，可以直接拿去打印了：&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;/static/planet/2021-01-25-physexp-using-python-2.png&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;
        &lt;p&gt;下面是整体代码：&lt;/p&gt;
        &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/env python3
        # -*- coding: utf-8 -*-
        &lt;/span&gt;
        &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;physicsexp.mainfunc&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
        &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;physicsexp.gendocx&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# read data
        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'./data.txt'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'r'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encoding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'utf-8'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;readoneline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;readoneline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Al_num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;readoneline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;readoneline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;fin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# data process
        &lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# calculated calibration values in class
        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.373e-3&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0161&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dEk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;c0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;299792458.&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;MeV&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1e6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;electron&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Emeasure&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dEk&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;x0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;640.01e-4&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Momentum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Eclassic&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Momentum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MeV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;me&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MeV&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Erela&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MeV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;me&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;me&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Momentum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MeV&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'pos&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'R&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'pc&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Momentum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'N&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Eclas&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Eclassic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Erela&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Erela&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Emes&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Emeasure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;simple_plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Momentum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Emeasure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;issetrange&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'+'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lab&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'测量动能'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;simple_plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Momentum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Eclassic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;issetrange&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'*'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lab&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'经典动能'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;simple_plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Momentum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Erela&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'o'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'1.png'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;issetrange&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;xlab&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'$pc/MeV$'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ylab&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'$E/MeV$'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'电子动能随动量变化曲线'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lab&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'相对论动能'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;150&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;simple_plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Al_num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Cnt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xlab&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'铝片数'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ylab&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'选区计数率(射线强度)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'$&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;beta$射线强度随铝片数衰减曲线'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'2.png'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;CntLn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Cnt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# d = 50 mg / cm^2
        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Al_Real&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Al_num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;slope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intercept&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;simple_linear_plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Al_Real&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CntLn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xlab&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'质量厚度$g/cm^{-2}$'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ylab&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'选区计数率对数(射线强度)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'半对数曲线曲线'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'3.png'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1e4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Cnt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intercept&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;gendocx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'gen.docx'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'1.png'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'2.png'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'3.png'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'slope, intercept: %f %f'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intercept&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;整个代码不含空行和注释共 46 行，而上面的自由落体代码 45 行。可见包装程度还是不错的。先计算然后画这三张图，写上面的代码和 Origin 相比哪个更快呢？还是看个人习惯，反正我是比较习惯代码。至少，这说明了大物实验需要的数据处理还是有很多相似点的，以至于打包一些函数可以提高一些生产力。&lt;/p&gt;
        &lt;p&gt;当然，这只是一个例子，对于个别实验，不管怎么处理都是要多花写时间的（直流辉光等离子体，说的就是你）。&lt;/p&gt;
        &lt;p&gt;你可能会问，为什么没有误差分析的功能。这确实是一个问题：计算 A 类和 B 类不确定度等不同实验差别很大，水平有限，我能做的除了将常数打表提供最基础的功能外，好像就没什么了。并且，开发得差不多时已经到二级中期了，算不确定度也不常见了（所以，别被一级吓怕了），所以这部分也没怎么测试过，属于 TODO。&lt;/p&gt;
        &lt;h2 id=&quot;迟到的-jupyter-notebook&quot;&gt;迟到的 Jupyter Notebook&lt;/h2&gt;
        &lt;p&gt;以上还是标准的 Python，但五级大物时，我尝试了仅一次就发现明显 Jupyter Notebook 更适合做类似的工作——尽管它不能用 Vim 编辑代码！这下子，数据直接输入在 Notebook 里就好了，画图也是所见即所得，不用等一张一张弹出来了。而进行临时的运算也不必影响正常流程。如图：&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;/static/planet/2021-01-25-physexp-using-python-3.png&quot; alt=&quot;3&quot; /&gt;&lt;/p&gt;
        &lt;p&gt;既然都到了 Jupyter ，如果&lt;strong&gt;多人合作&lt;/strong&gt;的话，&lt;a href=&quot;https://github.com/jupyterhub/jupyterhub&quot;&gt;JupyterHub&lt;/a&gt; 是非常不错的选择，可以多个人在一台服务器上使用 Jupyter Notebook 。我之前配置的是每个用户一个隔离的 Docker 容器，里面的 Python 已经装好了包，可以直接使用，同时挂载了一个共享空间可以分享写好的 Notebook 。其实 JupyterHub 有用 Github 帐号登录之类的权限管理功能，但当时我们是几个认识的人合作，就没有管这些。&lt;/p&gt;
        &lt;p&gt;具体的代码在我的 &lt;a href=&quot;https://github.com/ustcpetergu/physicsexp&quot;&gt;GitHub&lt;/a&gt; 上，如果有人在写大物实验报告的过程中无聊了想找个地方摸鱼浪费点时间，不妨来看看。&lt;/p&gt;
        &lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
        &lt;p&gt;如果您想尝试用 Python 处理大物实验数据，我可以比较负责地说对于 95% 以上的实验是完全没有问题的。使用 NumPy 和 SciPy 计算， Matplotlib 做图，配以 docx 生成、Jupyter Notebook 或 JupyterHub 团队合作，可以比较轻松（但不意味着节省时间）地完成所有需要的操作，并可以通过包装库提高效率。&lt;/p&gt;
        &lt;p&gt;之前也有学长学姐尝试过类似的大物实验自动化项目，但因为暂时无法全部找到并对比，这里就不说了。大一的时候确实是想搞一套自动化程度很高的东西，但水平实在有限，并且不同的实验处理过程不太一样，一己之力完成每一个实验专属的程序也不太现实，所以结果就是自己挖了个坑并跳进去出不来：有时想想，或许还是左手卡西欧 991 右手座标纸来得快一些呢！&lt;/p&gt;</content><author><name>petergu</name></author><category term="USTC" /><category term="大物实验" /><category term="Python" /><summary type="html">身为某世界一流退学的学生，大物实验自然是逃不过。本人有幸选择了大物实验最多的专业方向，从一级做到六级，直到上学期刚刚结束。大物实验里数据处理是占了很多时间的，那么怎么才能「优雅」地完成这一工作呢？</summary></entry><entry><title type="html">无主题小聚</title><link href="https://lug.ustc.edu.cn/news/2020/12/multitopic-party-2/" rel="alternate" type="text/html" title="无主题小聚" /><published>2020-12-27T17:30:00+08:00</published><updated>2021-02-04T21:53:03+08:00</updated><id>https://lug.ustc.edu.cn/news/2020/12/multitopic-party-2</id><content type="html" xml:base="https://lug.ustc.edu.cn/news/2020/12/multitopic-party-2/">&lt;p&gt;2020 年 12 月 27 日，USTC LUG 和 MSC 在西区 3C101 教室举办了本年度第二次无主题小聚。&lt;/p&gt;
        &lt;p&gt;金泽文同学介绍了 Serverless Computing，他以一个生动的例子开篇，展示了 Serverless 的巨大优势，随后深入介绍了 Apache OpenWhisk 的具体实现和 Serverless 目前的局限性。&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;https://ftp.lug.ustc.edu.cn/weekly_party/2020.12.27_%E6%97%A0%E4%B8%BB%E9%A2%98%E5%B0%8F%E8%81%9A/Photos/_DSC2165.JPG&quot; alt=&quot;金泽文介绍 Serverless&quot; /&gt;&lt;/p&gt;
        &lt;p&gt;随后，古宜民同学介绍了 GRUB 和 Linux 启动修复，他从 GRUB 在 Linux 启动中的作用开始，讲解并演示了如何在 GRUB 启动失败时进行修复。&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;https://ftp.lug.ustc.edu.cn/weekly_party/2020.12.27_%E6%97%A0%E4%B8%BB%E9%A2%98%E5%B0%8F%E8%81%9A/Photos/_DSC2246.JPG&quot; alt=&quot;古宜民介绍 GRUB&quot; /&gt;&lt;/p&gt;
        &lt;p&gt;接下来，刘紫檀介绍了他近期参与搭建的 Verilog OJ 在线评测系统。&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;https://ftp.lug.ustc.edu.cn/weekly_party/2020.12.27_%E6%97%A0%E4%B8%BB%E9%A2%98%E5%B0%8F%E8%81%9A/Photos/_DSC2278.JPG&quot; alt=&quot;刘紫檀介绍 Verilog OJ&quot; /&gt;&lt;/p&gt;
        &lt;p&gt;之后，袁一玮同学介绍了手机实现快充的原理，简述 USB-PD 协议的定义。&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;https://ftp.lug.ustc.edu.cn/weekly_party/2020.12.27_%E6%97%A0%E4%B8%BB%E9%A2%98%E5%B0%8F%E8%81%9A/Photos/_DSC2290.JPG&quot; alt=&quot;袁一玮介绍充电协议&quot; /&gt;&lt;/p&gt;
        &lt;p&gt;最后，明宇龙同学即兴发挥，分享了自己使用 AWS Lambda、Azure Function 和 Cloudflare Worker 的心得体会，介绍了自己 Serverless 架构的博客。&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;https://ftp.lug.ustc.edu.cn/weekly_party/2020.12.27_%E6%97%A0%E4%B8%BB%E9%A2%98%E5%B0%8F%E8%81%9A/Photos/_DSC2318.JPG&quot; alt=&quot;明宇龙介绍 Serverless&quot; /&gt;&lt;/p&gt;</content><author><name>wyf</name></author><category term="LUG活动" /><summary type="html">2020 年 12 月 27 日，USTC LUG 和 MSC 在西区 3C101 教室举办了本年度第二次无主题小聚。</summary></entry><entry><title type="html">在 Linux 内核中测试程序性能</title><link href="https://lug.ustc.edu.cn/planet/2020/12/tic-toc-in-kernel/" rel="alternate" type="text/html" title="在 Linux 内核中测试程序性能" /><published>2020-12-19T00:00:00+08:00</published><updated>2020-12-19T16:01:47+08:00</updated><id>https://lug.ustc.edu.cn/planet/2020/12/tic-toc-in-kernel</id><content type="html" xml:base="https://lug.ustc.edu.cn/planet/2020/12/tic-toc-in-kernel/">&lt;p&gt;本学期，我担任了李诚老师编译原理课程的助教。在课程实验中，我们基于 LLVM 构建了一套编译系统，其中一个实验需要编写后端优化算法。为了评估学生们的优化代码，我们需要比较优化前后的代码（在这里是 LLVM IR）的性能。我们通过统计程序运行的时间来比较代码的性能，但是用户程序会受到&lt;a href=&quot;https://101.lug.ustc.edu.cn/Ch04/#schedule&quot;&gt;内核调度&lt;/a&gt;。因为不是连续执行程序，所以受到调度造成的延迟会导致统计到的时间出现噪音，这些噪音可能会让测试结果不准确&lt;del&gt;甚至影响到了同学们的分数&lt;/del&gt;。最开始，我想到是不是可以统计指令数来评估性能，打算用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;perf stat&lt;/code&gt; 进行测试。然而，我们提供的实验环境基于虚拟机，&lt;a href=&quot;https://www.virtualbox.org/ticket/10754?cversion=0&amp;amp;cnum_hist=5&quot;&gt;VirtualBox&lt;/a&gt; 和 &lt;a href=&quot;https://github.com/microsoft/WSL/issues/4678&quot;&gt;WSL&lt;/a&gt; 都没有实现相关的虚拟寄存器，要让同学们方便地使用该指令会比较困难，只得作罢。这时，我突然想到，内核线程可以不受到调度，那么使用内核线程是不是可以更精确的测量时间呢？于是我便开始了尝试。&lt;/p&gt;
        &lt;p&gt;注：由于原本目的是用于 LLVM IR，所以使用了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clang&lt;/code&gt; 来编译内核，没有这种需求可以完全无视 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clang&lt;/code&gt;。&lt;/p&gt;
        &lt;h2 id=&quot;编写内核模块&quot;&gt;编写内核模块&lt;/h2&gt;
        &lt;h3 id=&quot;超简单的内核模块编写方法&quot;&gt;超简单的内核模块编写方法&lt;/h3&gt;
        &lt;p&gt;为了创建内核线程，我们可以构建一个内核模块，由它来执行相关的函数。构建一个基础的内核模块非常简单，这里我们 参考 &lt;a href=&quot;https://tldp.org/LDP/lkmpg/2.6/html/x121.html&quot;&gt;&lt;strong&gt;The Linux Kernel Module Programming Guide&lt;/strong&gt;&lt;/a&gt;：&lt;/p&gt;
        &lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/*
        *  hello_mod.c - The simplest kernel module.
        */&lt;/span&gt;
        &lt;span class=&quot;cp&quot;&gt;#include &amp;lt;linux/module.h&amp;gt;	&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* Needed by all modules */&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
        #include &amp;lt;linux/kernel.h&amp;gt;	&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* Needed for KERN_INFO */&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
        &lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init_module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;printk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KERN_INFO&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello world.&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/*
        * A non 0 return means init_module failed; module can't be loaded.
        */&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cleanup_module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;printk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KERN_INFO&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Goodbye world.&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;然后再加上一个简单的 Makefile：&lt;/p&gt;
        &lt;div class=&quot;language-makefile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# obj-m 告诉构建系统以模块编译，编译目标是 hello.ko
        &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;obj-m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; hello.o
        &lt;span class=&quot;nv&quot;&gt;hello-objs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; hello_mod.o
        &lt;span class=&quot;nl&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        make &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; /lib/modules/&lt;span class=&quot;nf&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;shell&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;uname&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;)&lt;/span&gt;/build &lt;span class=&quot;nv&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$(PWD)&lt;/span&gt; modules
        &lt;span class=&quot;nl&quot;&gt;clean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        make &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; /lib/modules/&lt;span class=&quot;nf&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;shell&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;uname&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;)&lt;/span&gt;/build &lt;span class=&quot;nv&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$(PWD)&lt;/span&gt; clean
        &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;这样，一个超简单的内核模块就完成啦！&lt;/p&gt;
        &lt;p&gt;为了编译内核模块，我们需要有头文件，在 Ubuntu 上可以安装 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;linux-headers-&amp;lt;version&amp;gt;&lt;/code&gt; 来实现。又或者你像我一样需要用到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clang&lt;/code&gt; ，那就下载 Linux 源码重新编译安装（PS：如果全量编译搭配 VSCode 补全体验很好）。在这之后，运行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo make CC=/path/to/clang&lt;/code&gt; 就可以编译这个模块了。编译完成后，会发现目录下多出来一个叫 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hello.ko&lt;/code&gt; 的文件，它就是我们编译得到的内核模块。&lt;/p&gt;
        &lt;p&gt;在这个模块中，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;init_module&lt;/code&gt; 会在模块被载入时调用，而 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cleanup_module&lt;/code&gt; 会被模块被卸载时被调用。通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;insmod hello.ko&lt;/code&gt;，可以载入它，而 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rmmod hello&lt;/code&gt; 可以卸载这个模块。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;printk&lt;/code&gt;会将日志打印到内核的日志中，调用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dmesg&lt;/code&gt; 可以看到模块打印的欢迎和告别信息。&lt;/p&gt;
        &lt;h3 id=&quot;tic-toc-&quot;&gt;Tic-Toc …&lt;/h3&gt;
        &lt;p&gt;虽然已经编写了一个模块，但是它啥都干不来，我们还得实现计时功能。在编写用户态程序时，语言库里通常有获取当前时间的函数，内核也一样。我们可以通过&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ktime.h&lt;/code&gt; 中的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ktime_get&lt;/code&gt; 来获取时间，大概的逻辑如下：&lt;/p&gt;
        &lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;ktime_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;u64&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dur_ns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ktime_get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 被测试的函数&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ktime_get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dur_ns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ktime_to_ns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ktime_sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;printk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KERN_INFO&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;foo runtime: %lluns&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dur_ns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;看得出来，内核里的函数接口也很平易近人，简单几行就把我们最核心的算法实现完了。&lt;/p&gt;
        &lt;h3 id=&quot;怎么使用它&quot;&gt;怎么使用它？&lt;/h3&gt;
        &lt;p&gt;现在，我们已经知道了如何统计时间，还得设计一个接口来让人触发相关的功能。虽然让模块在初始化时运行也不是不行，但是扩展性就变得太糟糕了。我决定用 &lt;a href=&quot;https://en.wikipedia.org/wiki/Procfs&quot;&gt;procfs&lt;/a&gt; 来设计一个接口。Procfs 来源于 UNIX 哲学中一切皆文件的思想，它把系统运行时的一些信息用文件目录的形式展示出来，这样可以通过简单的文件操作（比如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cat&lt;/code&gt;、管道等）来访问和控制系统相关的参数，你可以通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/proc/&lt;/code&gt; 目录访问里面的内容。&lt;/p&gt;
        &lt;p&gt;在初始化的时候，我们通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;proc_mkdir&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;proc_create&lt;/code&gt; 可以像普通的文件系统一样在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/proc/&lt;/code&gt; 目录下创建目录和文件：&lt;/p&gt;
        &lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 在 /proc/ 下创建一个目录&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proc_mkdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;proc_dirname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EEXIST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 在 /proc/&amp;lt;proc_dirname&amp;gt;/ 目录下创建一个文件，并让该文件使用 bench_fops&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;proc_create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0444&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bench_fops&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ENOMEM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;这里的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bench_fops&lt;/code&gt; 是一个类型为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;struct file_operations&lt;/code&gt; 的结构体。它能为这个文件注册功能，比如 open、read、write 等。在内核中设计一个文件系统也需要实现类似的操作，万幸的是， procfs 下不需要实现 &lt;a href=&quot;https://en.wikipedia.org/wiki/POSIX&quot;&gt;POSIX&lt;/a&gt; 语义。在这里，我希望只要有 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;write&lt;/code&gt; 被调用时，就会运行我的测试程序，这样我只要在 shell 中用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;echo&lt;/code&gt; 和管道重定向就能调用它了：&lt;/p&gt;
        &lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 所有参数都用不到，我们只希望触发一次测试&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;ssize_t&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run_bench&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loff_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ppos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 测试相关的函数&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 返回长度和参数一样代表写入成功&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 这是 C99 加入的结构体指定初始化，其它成员默认为空。&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 这意味着该文件只支持写&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file_operations&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bench_fops&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;owner&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;THIS_MODULE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run_bench&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;模块功能已经完成了，最后得给模块取个好听的名字。我把英文中表示时间流逝的 tic-toc （tick-tock） 和表示内核的 kernel 合在一起，就变成了 tiktok。&lt;/p&gt;
        &lt;h2 id=&quot;链接函数&quot;&gt;链接函数&lt;/h2&gt;
        &lt;p&gt;我本以为编写了寥寥数行 tiktok，将 LLVM IR 编译到目标文件再链接到模块上便可以了。然而经过测试，这样做会导致进程一直无法返回。经过反汇编比较了同一段代码在内核模块里编译的结果和外部产生的结果后，我才理解是因为编译选项不同导致了内存布局的差别，这使得默认参数编译的代码无法在内核中使用。由于内核编译选项繁杂，根据不同架构也会产生不同的选项，我们必须把代码放置进内核的构建系统内来让它产生内核想要的汇编（现在的内核中禁用了浮点数，所以浮点计算就无法测试了）。对于普通的 c 文件，只需要在 Makefile 中加上几句，比如：&lt;/p&gt;
        &lt;div class=&quot;language-makefile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;hello-objs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; hello_mod.o another_file.o
        &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;但是 LLVM IR 还需要一些技巧来骗过编译系统才行。我把自制编译器产生的 IR 文件改成了 .c 文件，并修改了 Makefile：&lt;/p&gt;
        &lt;div class=&quot;language-makefile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;hello-objs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; hello_mod.o another_file.o
        &lt;span class=&quot;nv&quot;&gt;CFLAGS_another_file.o&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-O0&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-x&lt;/span&gt; ir
        &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;内核编译系统会在产生 another_file.o 时将这里的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-O0 -x ir&lt;/code&gt; 传给编译器，这让编译器知道接下来要读的语言是 LLVM IR，并且关掉大部分优化（这样才能体现出自制编译器中的优化效果）。由于 LLVM IR 编译时会忽略一些选项，所以我让编译器在产生中间代码时就加上了属性来确保编译正确。&lt;/p&gt;
        &lt;p&gt;虽然知道了怎么链接函数，但是内核是无法链接库函数的，而 IO 函数也无法直接在内核中使用。对此，我们可以修改相关的函数，在 tiktok 实现相似的功能。比如， &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;printf&lt;/code&gt; 可以转换成 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;printk&lt;/code&gt;，而 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exit&lt;/code&gt; 可以换成内核中的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;do_exit&lt;/code&gt;。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;malloc&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;free&lt;/code&gt; 比较复杂，内核中的内存可没有进程那样退出就自动释放这么好的待遇。所以，在内核中必须得手动维护每一次分配和释放，避免出现事故导致 panic 或者内存泄漏（当然我很懒，课程不需要我就都没实现）。&lt;/p&gt;
        &lt;h2 id=&quot;一个小测试&quot;&gt;一个小测试&lt;/h2&gt;
        &lt;p&gt;既然实现完了，我们进行一个测试来检验 tiktok 的功能：&lt;/p&gt;
        &lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#define OUT_LOOP 100
        &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OUT_LOOP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;上面是一段进行一些无意义计算的代码，我们修改 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OUT_LOOPS&lt;/code&gt; 的大小（100、99、98）来比较不同方法的灵敏度。除了普通的 time 测量，我还加入了一组使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;taskset(1)&lt;/code&gt; 的对照组。 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;taskset&lt;/code&gt; 控制了程序的亲核性，这使得程序总能被调度到同一个核上，减少了跨核导致的缓存失效开销。为了减少随机误差，每种配置我都运行进行了 100 次函数得到虚列。实验数据可以在&lt;a href=&quot;https://github.com/gloit042/tiktok/tree/main/bench&quot;&gt;这里&lt;/a&gt;查看。要反映灵敏度，我们无法直接拿不同方法的结果进行比较，而是要在同一个方法内看看能否显著区分出不同循环次数带来运行时间差距（约为 1%~%2）。短暂尝试了复习概率论和数理统计后，我谷歌到了 &lt;a href=&quot;https://en.wikipedia.org/wiki/Kolmogorov%E2%80%93Smirnov_test&quot;&gt;K-S 检验&lt;/a&gt; （Kolmogorov-Smirnov test），对于两组输入数据它可以检验它们是否同分布。这里我们假设实际运行时间是固有的，而调度等开销造成的是一个均匀同分布的随机误差。如果测量工具对两种配置得到的两组数据无法拒绝同分布假设，我们可以认为它无法准确得检测出程序性能的差异（统计全忘光了，我不知道我在说啥，如果有误欢迎指正）。我使用了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scipy.stat.kstest&lt;/code&gt; 来进行了 K-S 检验，结果如下表 （p 值小于 0.05 拒绝同分布假设）：&lt;/p&gt;
        &lt;table&gt;
        &lt;thead&gt;
        &lt;tr&gt;
        &lt;th style=&quot;text-align: center&quot;&gt;p 值&lt;/th&gt;
        &lt;th style=&quot;text-align: center&quot;&gt;98-99&lt;/th&gt;
        &lt;th style=&quot;text-align: center&quot;&gt;99-100&lt;/th&gt;
        &lt;th style=&quot;text-align: center&quot;&gt;98-100&lt;/th&gt;
        &lt;th style=&quot;text-align: center&quot;&gt;98-98&lt;/th&gt;
        &lt;th style=&quot;text-align: center&quot;&gt;99-99&lt;/th&gt;
        &lt;th style=&quot;text-align: center&quot;&gt;100-100&lt;/th&gt;
        &lt;/tr&gt;
        &lt;/thead&gt;
        &lt;tbody&gt;
        &lt;tr&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;normal_time&lt;/td&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;$2.11*10^{-1}$&lt;/td&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;$5.83*10^{-1}$&lt;/td&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;$3.68*10^{-1}$&lt;/td&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;$3.6*10^{-2}$&lt;/td&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;$5.83*10^{-1}$&lt;/td&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;$1.29*10^{-3}$&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;taskset_time&lt;/td&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;$1.56*10^{-2}$&lt;/td&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;$2.11*10^{-1}$&lt;/td&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;$3.21*10^{-5}$&lt;/td&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;$8.15*10^{-1}$&lt;/td&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;$8.15*10^{-1}$&lt;/td&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;$2.4*10^{-2}$&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;tiktok&lt;/td&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;$3.73*10^{-36}$&lt;/td&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;$6.31*10^{-19}$&lt;/td&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;$2.6*10^{-38}$&lt;/td&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;$4.11*10^{-43}$&lt;/td&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;$1.41*10^{-28}$&lt;/td&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;$2.24*10^{-4}$&lt;/td&gt;
        &lt;/tr&gt;
        &lt;/tbody&gt;
        &lt;/table&gt;
        &lt;p&gt;gg，完全没有用，连同一个配置都分不清楚。虽然占据了一个核，但是虚拟机本身也在被调度，这个误差并不满足我们的假设。但是，还不能放弃，还可以抢救一下，我把 tiktok 放裸机上测试了一下，得到的结果如下：&lt;/p&gt;
        &lt;table&gt;
        &lt;thead&gt;
        &lt;tr&gt;
        &lt;th style=&quot;text-align: center&quot;&gt;p 值&lt;/th&gt;
        &lt;th style=&quot;text-align: center&quot;&gt;98-99&lt;/th&gt;
        &lt;th style=&quot;text-align: center&quot;&gt;99-100&lt;/th&gt;
        &lt;th style=&quot;text-align: center&quot;&gt;98-100&lt;/th&gt;
        &lt;th style=&quot;text-align: center&quot;&gt;98-98&lt;/th&gt;
        &lt;th style=&quot;text-align: center&quot;&gt;99-99&lt;/th&gt;
        &lt;th style=&quot;text-align: center&quot;&gt;100-100&lt;/th&gt;
        &lt;/tr&gt;
        &lt;/thead&gt;
        &lt;tbody&gt;
        &lt;tr&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;normal_time&lt;/td&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;$4.04*10^{-35}$&lt;/td&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;$2.82*10^{-1}$&lt;/td&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;$3.05*10^{-31}$&lt;/td&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;$8.15*10^{-1}$&lt;/td&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;$5.83*10^{-1}$&lt;/td&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;$1.54*10^{-1}$&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;taskset_time&lt;/td&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;$1.42*10^{-51}$&lt;/td&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;$3.64*10^{-2}$&lt;/td&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;$4.39*10^{-55}$&lt;/td&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;$5.39*10^{-1}$&lt;/td&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;$9.08*10^{-1}$&lt;/td&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;$2.11*10^{-1}$&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;tiktok&lt;/td&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;$2.20*10^{-59}$&lt;/td&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;$4.39*10^{-55}$&lt;/td&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;$2.20*10^{-59}$&lt;/td&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;$2.11*10^{-1}$&lt;/td&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;$7.02*10^{-1}$&lt;/td&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;$2.11*10^{-1}$&lt;/td&gt;
        &lt;/tr&gt;
        &lt;/tbody&gt;
        &lt;/table&gt;
        &lt;p&gt;在裸机上，tiktok 的优势就体现了出来，它比 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;taskset&lt;/code&gt; 要更加灵敏一点。然而裸机上使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;perf stat&lt;/code&gt;就可以看到更加精确的指令数结果…&lt;/p&gt;
        &lt;h2 id=&quot;小结&quot;&gt;小结&lt;/h2&gt;
        &lt;p&gt;虽然 tiktok 被证明没有太多实际价值，但是研究的过程中我还是学到了挺多 Linux 内核编译系统的知识。我想分享一下这个过程，是因为我觉得这很有趣。如果你对 tiktok 感兴趣，它在我的 &lt;a href=&quot;https://github.com/gloit042/tiktok&quot;&gt;Github&lt;/a&gt; 上，它比本文介绍的要稍微复杂一丢丢。如果你想要了解更多关于 Linux 内核的内容，网络上有许多很好的资料。至于编译课程，我估计细小的差距是没法在虚拟机里准确测量了，还是要尽量避开这种测试样例（Windows 上应该也有工具，但是不太方便）。&lt;/p&gt;</content><author><name>gloit</name></author><category term="Technology" /><category term="Benchmark" /><category term="Kernel" /><category term="LLVM" /><summary type="html">本学期，我担任了李诚老师编译原理课程的助教。在课程实验中，我们基于 LLVM 构建了一套编译系统，其中一个实验需要编写后端优化算法。为了评估学生们的优化代码，我们需要比较优化前后的代码（在这里是 LLVM IR）的性能。我们通过统计程序运行的时间来比较代码的性能，但是用户程序会受到内核调度。因为不是连续执行程序，所以受到调度造成的延迟会导致统计到的时间出现噪音，这些噪音可能会让测试结果不准确甚至影响到了同学们的分数。最开始，我想到是不是可以统计指令数来评估性能，打算用 perf stat 进行测试。然而，我们提供的实验环境基于虚拟机，VirtualBox 和 WSL 都没有实现相关的虚拟寄存器，要让同学们方便地使用该指令会比较困难，只得作罢。这时，我突然想到，内核线程可以不受到调度，那么使用内核线程是不是可以更精确的测量时间呢？于是我便开始了尝试。</summary></entry><entry><title type="html">无主题小聚</title><link href="https://lug.ustc.edu.cn/news/2020/12/multitopic-party/" rel="alternate" type="text/html" title="无主题小聚" /><published>2020-12-13T17:30:00+08:00</published><updated>2021-02-04T21:53:03+08:00</updated><id>https://lug.ustc.edu.cn/news/2020/12/multitopic-party</id><content type="html" xml:base="https://lug.ustc.edu.cn/news/2020/12/multitopic-party/">&lt;p&gt;2020 年 12 月 13 日，USTCLUG 和 MSC 在西区 3A109 教室开展了本年度第一次无主题小聚活动。&lt;/p&gt;
        &lt;p&gt;明宇龙同学从介绍时代背景开始，表示了民用 CPU 核心数的增加和 GPU 计算的普及，并行变得越来越重要。他从异步和多进程开始，讲述了多进程和资源的概念、各种语言的多进程实现和其弊端，引出了线程、纤程和协程的概念。&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;http://ftp.lug.ustc.edu.cn/weekly_party/2020.12.13_%E6%97%A0%E4%B8%BB%E9%A2%98%E5%B0%8F%E8%81%9A/Photos/_DSC1911.JPG&quot; alt=&quot;myl&quot; /&gt;&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;http://ftp.lug.ustc.edu.cn/weekly_party/2020.12.13_%E6%97%A0%E4%B8%BB%E9%A2%98%E5%B0%8F%E8%81%9A/Photos/_DSC1926.JPG&quot; alt=&quot;myl2&quot; /&gt;&lt;/p&gt;
        &lt;p&gt;之后由李文睿同学介绍 Grafana，一个能将服务器的运行状况可视化的软件。他以一个开源社区游戏为例，详细地讲述了如何使用 TIG 套件监视游戏的在线人数、服务器的运行状况等等信息。&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;http://ftp.lug.ustc.edu.cn/weekly_party/2020.12.13_%E6%97%A0%E4%B8%BB%E9%A2%98%E5%B0%8F%E8%81%9A/Photos/_DSC2021.JPG&quot; alt=&quot;lwr&quot; /&gt;&lt;/p&gt;
        &lt;p&gt;陶柯宇同学介绍了如何使用 Electron 框架开发跨平台桌面应用程序，分享了他近期积累的相关经验。他从各种操作系统下有的图形库开始，引出了 Electron 基础的用法。同时，他结合自己之前做的一个项目，详细地为大家讲解了 Electron 的配置。&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;http://ftp.lug.ustc.edu.cn/weekly_party/2020.12.13_%E6%97%A0%E4%B8%BB%E9%A2%98%E5%B0%8F%E8%81%9A/Photos/_DSC2032.JPG&quot; alt=&quot;taoky&quot; /&gt;&lt;/p&gt;
        &lt;p&gt;古宜民同学讲述了如何使用 Vivado 的 Debug 模式调试 Verilog 代码，分享了在 FPGA 开发方面的一些经验。&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;http://ftp.lug.ustc.edu.cn/weekly_party/2020.12.13_%E6%97%A0%E4%B8%BB%E9%A2%98%E5%B0%8F%E8%81%9A/Photos/_DSC2084.JPG&quot; alt=&quot;gym&quot; /&gt;&lt;/p&gt;
        &lt;p&gt;付佳伟同学讲述了静态网站的搭建，并且拿了 LUG 官网和几位同学的博客作为例子进行比较。&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;http://ftp.lug.ustc.edu.cn/weekly_party/2020.12.13_%E6%97%A0%E4%B8%BB%E9%A2%98%E5%B0%8F%E8%81%9A/Photos/_DSC2099.JPG&quot; alt=&quot;ibug&quot; /&gt;&lt;/p&gt;
        &lt;p&gt;郑子涵同学通过两个程序示例介绍了 x86 和 arm64 在内存模型方面的差异。&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;http://ftp.lug.ustc.edu.cn/weekly_party/2020.12.13_%E6%97%A0%E4%B8%BB%E9%A2%98%E5%B0%8F%E8%81%9A/Photos/_DSC2140.JPG&quot; alt=&quot;zzh&quot; /&gt;&lt;/p&gt;</content><author><name>yyw</name></author><category term="LUG活动" /><summary type="html">2020 年 12 月 13 日，USTCLUG 和 MSC 在西区 3A109 教室开展了本年度第一次无主题小聚活动。</summary></entry></feed>